" Enable matchit for rubyblock plugin
runtime macros/matchit.vim

" Rapid editing of vimrc
nmap <leader>ve :tabedit $HOME/.vimrc.after<CR>
nmap <leader>vs :source $MYVIMRC<CR>

" Options
try
  set transparency=0
catch
endtry
set wrap
set linespace=2
set guifont=Menlo:h12
set guioptions=aAce
set hidden                      " Allow buffer change w/o saving
set lazyredraw                  " Don't update while executing macros
set backspace=indent,eol,start  " Sane backspace behavior
set history=1000                " Remember last 1000 commands
set scrolloff=2                 " Keep at least 4 lines below cursor
set relativenumber
set number
syntax enable
set textwidth=80
if exists('+colorcolumn')
  set colorcolumn=+1
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif
highlight ColorColumn ctermbg=235 guibg=#252525
let &colorcolumn=join(range(81,999),",")

" Search
set incsearch  " Highlight while searching
set hlsearch   " Highlight matches after searching
nmap <leader>h :nohlsearch<CR>

" Case-insensitive command completion
"set noignorecase
set fileignorecase
set wildignorecase
"nnoremap / /\C

" Adjust ctrlp.vim plugin settings, ignore certain files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.csv,*.sql

" Ack
cnoreabbrev Ack Ack!
nnoremap <leader>a :Ack!<Space>

" Search/Replace in local file
vnoremap <C-R> <Esc>:%s/<C-r>+//gc<left><left><left>

" Search/Replace in project using Ack
vnoremap <C-A> <Esc>:Ack! "<C-r><C-w>"<left>

" Map enter to insert newline after current line
map <CR> o<Esc>

" Map shift-enter to insert newline before current line
map <S-Enter> O<Esc>

" Map space to insert a single character
nmap <Space> i_<Esc>r

" Map K to split lines (the opposite of J)
nmap K i<CR><Esc>k$

" Map cpwd to copy path of current file
nmap cpwd :let @" = expand("%") <CR>

" Mirror unnamed buffer to OS clipboard
set clipboard=unnamed

" Common search/replace to remove trailing whitespace
nmap spc <Esc>:%s/\s\+$//g

" Common search/replace to merge lines, separating with comma
nmap cma <Esc>:%s/\n/, /g

" Common search/replace to update ruby hash synax
nmap hsh <Esc>:s/:\(\w\+\) => /\1: /gc

" Common search/replace to update ruby hash synax
nmap qt <Esc>:s/"/'/gc

" NERDTreeFind
nmap ,m :NERDTreeFind<CR>

" Windows
"set winwidth=84
"set winheight=5
"set winminheight=5
"set winheight=999
"let g:golden_ratio_autocommand = 0
"nmap <C-w>- :GoldenRatioResize<CR>
"nmap <C-w>t :GoldenRatioToggle<CR>
map <leader>q :close<CR>
map <leader>w <C-w>w

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<CR>:wincmd \|<CR>
nnoremap <leader>= :wincmd =<CR>

" Splits
set splitright
set splitbelow

" Vim Tmux Runner - Connect Vim and tmux to allow running lines & commands
nnoremap <leader>va :VtrAttachToPane<CR>
nnoremap <leader>vf :VtrFocusRunner<CR>
nnoremap <leader>vl :VtrSendLinesToRunner<CR>
nnoremap <leader>vc :VtrSendCommandToRunner<CR>
nnoremap <leader>osh :VtrOpenRunner {'orientation': 'h', 'percentage': 50}<CR>
nnoremap <leader>irb :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'irb'}<CR>

" Some settings to enable the theme:
set background=dark
let g:solarized_termcolors = 256
let g:solarized_termtrans = 1
colorscheme solarized

" Status line
set statusline=%f
set statusline+=\ [%{strlen(&fenc)?&fenc:&enc}]
set statusline+=\ %{fugitive#statusline()}
set statusline+=\ %{rvm#statusline()}
set statusline+=\ Line:%l\/%L
set statusline+=\ Col:%c

let test#strategy = 'terminal'
let g:test#preserve_screen = 1
nmap <silent> <leader>tt :TestNearest<CR>
nmap <silent> <leader>TT :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>

let g:vim_browser = 'safari'
let g:vim_domain = 'http://titleleaf.dev'
nnoremap <leader>v :OpenViewInBrowser<CR>
source ~/.dotfiles/vim/open_view_in_browser.vim

source ~/.dotfiles/vim/tabline.vim
source ~/.dotfiles/vim/ctags.vim
